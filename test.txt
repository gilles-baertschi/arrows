main :: IO () ()
main = arr test >>> print >>> const '\n' >>> putChar
-- main = ask >>> arr (read >>> offAge) >>> answer >>> const '\n' >>> putChar
-- main = const (l (r (8, 5))) >>> arr show >>> print

test :: () -> String 
-- test = const ((), (initial, (0, rules))) >>> execMachine >>>[Id] snd >>>[Id] show[Machine]
test = const ((r 2, True), (r 5, True)) >>> (==) >>> show

-- answer :: IO Bool ()
-- answer = arr boolToChoice >>> const "zu jung" ||| const "alt genug" >>> print

-- offAge :: Int -> Bool
-- offAge = double >>> second (const 18) >>> (>=)

-- ask :: IO () String
-- ask = const "Wie alt bist du? " >>> print >>> readLine

instance Show Machine where
   show = fst >>> (double >>> (reverse >>> boolListTo01) *** const "[" >>> (<>)) *** (fromRight >>> (double >>> (boolTo01 >>> double >>> second (const (l ())) >>> r) *** const "]" >>> (<>)) *** boolListTo01 >>> (<>)) >>> (<>) 

boolListTo01 :: List Bool -> String
boolListTo01 = double >>> first (const boolTo01) >>> map

boolTo01 :: Bool -> Char
boolTo01 = boolToChoice >>> const '0' ||| const '1'

rules :: List Rule
rules = [(((True, r True), r 1), ((True, r False), r 1)), (((True, r False), r 0), ((False, r False), r 2)), (((True, r True), l ()), ((True, r False), r 3)), (((True, r True), r 3), ((False, r True), r 0))]

initial :: (List Bool, List Bool)
initial = ([], [False])

type Machine = ((List Bool, List Bool), (Int, List Rule))
type Rule = (RulePart, RulePart)
type RulePart = ((Bool, (() | Bool)), (() | Int)) -- ((write, move), (halt | next rule))

execMachine :: State Machine () ()
execMachine = getRulePart >>> (writeAndMove *** continueExec) >>> const ()

getRulePart :: State Machine a RulePart
getRulePart = readAtHead &&& getRule >>>[Id] arr (choice >>> fst ||| snd)

continueExec :: State Machine (() | Int) ()
continueExec = right (setRule >>>[State s] execMachine) >>> const ()

writeAndMove :: State Machine (Bool, (() | Bool)) ()
writeAndMove = writeAtHead *** moveHead >>> const ()

readAtHead :: State Machine a Bool
readAtHead = get >>>[Id] arr[State s] (fst >>> snd >>> head)

writeAtHead :: State Machine Bool ()
writeAtHead = arr double >>>[Id] first get >>>[Id] arr (changeHead >>> fst) >>> put

changeHead :: State Bool Machine Machine
changeHead = first[State s] (second[State s] (arr fromRight >>> first get >>> arr r))

moveHead :: State Machine (() | Bool) ()
moveHead = right (arr boolToChoice >>> moveHeadLeft ||| moveHeadRight) >>> const ()

moveHeadLeft :: State Machine a ()
moveHeadLeft = get >>> first[State s] (arr (first extendIfNeeded >>> moveRight)) >>> put

moveHeadRight :: State Machine a ()
moveHeadRight = get >>> first[State s] (arr (second (fromRight >>> second extendIfNeeded >>> r) >>> moveLeft)) >>> put

extendIfNeeded :: List Bool -> List Bool
extendIfNeeded = (const (r (False, l ()))) ||| r

getRule :: State Machine a Rule
getRule = get >>> arr (snd >>>[Id] (!!))

setRule :: State Machine Int ()
setRule = arr double >>> first get >>> arr (changeRule >>> fst) >>> put

changeRule :: State Int Machine Machine
changeRule = second (first get)
